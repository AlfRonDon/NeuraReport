# ---- Normalize / auto-discover BATCH_IDS ----
    need_discover = False
    existing = batch_ids

    if isinstance(existing, str):
        existing = [existing]

    if not existing:
        need_discover = True
    else:
        if not isinstance(existing, (list, tuple)):
            need_discover = True
        else:
            existing = list(existing)
            if len(pcols) > 1:
                if any(not _looks_like_composite_id(i, len(pcols)) for i in existing):
                    print("Î“Ã¤â•£âˆ©â••Ã… Provided BATCH_IDS do not match composite key format; falling back to auto-discovery.")
                    need_discover = True

    if need_discover:
        with sqlite3.connect(str(DB_PATH)) as con:
            con.row_factory = sqlite3.Row
            cur = con.cursor()

            # Parent discovery
            if len(pcols) == 1:
                parent_sql = f"""
                    SELECT DISTINCT {qident(pcols[0])} AS bid
                    FROM {qident(parent_table)}
                    WHERE {parent_pred}
                """
                parent_ids = [r["bid"] for r in cur.execute(parent_sql, PDATE)]
            else:
                parent_sql = f"""
                    SELECT DISTINCT {_key_expr(pcols)} AS bid
                    FROM {qident(parent_table)}
                    WHERE {parent_pred}
                """
                parent_ids = [r["bid"] for r in cur.execute(parent_sql, PDATE)]

            # Child discovery
            if len(ccols) == 1:
                child_sql = f"""
                    SELECT DISTINCT {qident(ccols[0])} AS bid
                    FROM {qident(child_table)}
                    WHERE {child_pred}
                """
                child_ids = [r["bid"] for r in cur.execute(child_sql, CDATE)]
            else:
                child_sql = f"""
                    SELECT DISTINCT {_key_expr(ccols)} AS bid
                    FROM {qident(child_table)}
                    WHERE {child_pred}
                """
                child_ids = [r["bid"] for r in cur.execute(child_sql, CDATE)]

            all_ids = sorted({str(x) for x in (parent_ids + child_ids)})

            if len(all_ids) <= 1:
                # Relax discovery if filtered too tightly by date
                if len(pcols) == 1:
                    p_all = f"SELECT DISTINCT {qident(pcols[0])} AS bid FROM {qident(parent_table)}"
                else:
                    p_all = f"SELECT DISTINCT {_key_expr(pcols)} AS bid FROM {qident(parent_table)}"
                if len(ccols) == 1:
                    c_all = f"SELECT DISTINCT {qident(ccols[0])} AS bid FROM {qident(child_table)}"
                else:
                    c_all = f"SELECT DISTINCT {_key_expr(ccols)} AS bid FROM {qident(child_table)}"
                parent_ids = [r["bid"] for r in cur.execute(p_all)]
                child_ids  = [r["bid"] for r in cur.execute(c_all)]
                all_ids = sorted({str(x) for x in (parent_ids + child_ids)})

            BATCH_IDS = all_ids
    else:
        BATCH_IDS = existing

    print("â‰¡Æ’Ã¶Ã„ BATCH_IDS:", len(BATCH_IDS or []), (BATCH_IDS or [])[:20] if BATCH_IDS else [])

