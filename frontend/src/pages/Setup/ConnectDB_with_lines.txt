1	import { useState } from 'react'
2	import { Box, Paper, Stack, TextField, MenuItem, Button, Typography, Alert, InputAdornment, IconButton, Chip, Collapse, Table, TableHead, TableRow, TableCell, TableBody } from '@mui/material'
3	import { useForm } from 'react-hook-form'
4	import { yupResolver } from '@hookform/resolvers/yup'
5	import * as yup from 'yup'
6	import { isMock } from '../../api/client'
7	import * as mock from '../../api/mock'
8	import { useMutation } from '@tanstack/react-query'
9	import { useAppStore } from '../../store/useAppStore'
10	import Visibility from '@mui/icons-material/Visibility'
11	import VisibilityOff from '@mui/icons-material/VisibilityOff'
12	import ConfirmDialog from '../../components/ConfirmDialog.jsx'
13	import { useToast } from '../../components/ToastProvider.jsx'
14	
15	const schema = yup.object({
16	  db_type: yup.string().required(),
17	  host: yup.string().required('Host is required'),
18	  port: yup.number().typeError('Port must be a number').integer().min(1).max(65535).required(),
19	  db_name: yup.string().required('Database is required'),
20	  username: yup.string().required('Username is required'),
21	  password: yup.string().required('Password is required'),
22	  ssl: yup.boolean().default(false),
23	}).required()
24	
25	export default function ConnectDB() {
26	  const {
27	    connection,
28	    setConnection,
29	    setSetupStep,
30	    savedConnections,
31	    addSavedConnection,
32	    updateSavedConnection,
33	    removeSavedConnection,
34	    activeConnectionId,
35	    setActiveConnectionId,
36	  } = useAppStore()
37	  const [showPw, setShowPw] = useState(false)
38	  const [showDetails, setShowDetails] = useState(false)
39	  const { register, handleSubmit, formState: { errors }, watch, reset } = useForm({
40	    resolver: yupResolver(schema),
41	    defaultValues: { db_type: 'postgres', port: 5432, ssl: false },
42	  })
43	  const [editingId, setEditingId] = useState(null)
44	  const [confirmSelect, setConfirmSelect] = useState(null)
45	  const [confirmDelete, setConfirmDelete] = useState(null)
46	  const [testFeedback, setTestFeedback] = useState({}) // {id: timestamp}
47	  const toast = useToast()
48	
49	  const mutation = useMutation({
50	    mutationFn: async (payload) => {
51	      if (isMock) return mock.testConnection(payload)
52	      // Real call placeholder; keep consistent shape
53	      throw new Error('Backend not available yet')
54	    },
55	    onSuccess: (data) => setConnection({ status: 'connected', lastMessage: data.details }),
56	    onError: (err) => setConnection({ status: 'failed', lastMessage: err?.response?.data?.detail || err.message }),
57	  })
58	
59	  const onSubmit = (values) => mutation.mutate(values)
60	
61	  return (
62	    <Paper variant="outlined" sx={{ p: 2 }}>
63	      <Typography variant="h6" sx={{ mb: 2 }}>Connect Database</Typography>
64	      <Box component="form" onSubmit={handleSubmit(onSubmit)}>
65	        <Stack direction={{ xs: 'column', sm: 'row' }} spacing={2} sx={{ mb: 2 }}>
66	          <TextField select label="DB Type" fullWidth size="small" defaultValue={watch('db_type')} {...register('db_type')}>
67	            <MenuItem value="postgres">PostgreSQL</MenuItem>
68	            <MenuItem value="mysql">MySQL/MariaDB</MenuItem>
69	            <MenuItem value="mssql">SQL Server</MenuItem>
70	            <MenuItem value="sqlite">SQLite</MenuItem>
71	          </TextField>
72	          <TextField label="Host" fullWidth size="small" error={!!errors.host} helperText={errors.host?.message} {...register('host')} />
73	          <TextField label="Port" fullWidth size="small" error={!!errors.port} helperText={errors.port?.message} {...register('port')} />
74	        </Stack>
75	        <Stack direction={{ xs: 'column', sm: 'row' }} spacing={2} sx={{ mb: 2 }}>
76	          <TextField label="Database" fullWidth size="small" error={!!errors.db_name} helperText={errors.db_name?.message} {...register('db_name')} />
77	          <TextField label="Username" fullWidth size="small" error={!!errors.username} helperText={errors.username?.message} {...register('username')} />
78	          <TextField label="Password" type={showPw ? 'text' : 'password'} fullWidth size="small" error={!!errors.password} helperText={errors.password?.message}
79	            InputProps={{ endAdornment: (
80	              <InputAdornment position="end">
81	                <IconButton onClick={() => setShowPw(v => !v)} edge="end" aria-label="toggle password visibility">
82	                  {showPw ? <VisibilityOff /> : <Visibility />}
83	                </IconButton>
84	              </InputAdornment>
85	            ) }}
86	            {...register('password')} />
87	        </Stack>
88	        <Stack direction="row" spacing={2} alignItems="center">
89	          <Button variant="contained" type="submit" disabled={mutation.isPending}>Test Connection</Button>
90	          <Button
91	            variant="outlined"
92	            disabled={connection.status !== 'connected'}
93	            onClick={() => {
94	              const v = watch()
95	              const display = v?.db_type && v?.host ? `${v.db_type}@${v.host}${v?.db_name ? '/' + v.db_name : ''}` : ''
96	              const base = {
97	                name: display || 'Connection',
98	                db_type: v.db_type,
99	                host: v.host,
100	                db_name: v.db_name,
101	                status: 'connected',
102	                lastConnected: new Date().toISOString(),
103	              }
104	              if (editingId) {
105	                updateSavedConnection(editingId, base)
106	              } else {
107	                const id = `conn_${Date.now()}`
108	                addSavedConnection({ id, ...base })
109	                setActiveConnectionId(id)
110	              }
111	              setEditingId(null)
112	              setConnection({ saved: true, name: display })
113	              setSetupStep('upload')
114	              toast.show('Connection saved', 'success')
115	            }}
116	          >Save & Continue</Button>
117	          {mutation.isPending && <Typography variant="body2" color="text.secondary">Testingâ€¦</Typography>}
118	          {connection.status === 'connected' && (
119	            <Chip color="success" label="Connected" size="small" onClick={() => setShowDetails(v=>!v)} />
120	          )}
121	          {connection.status === 'failed' && (
122	            <Chip color="error" label="Failed" size="small" onClick={() => setShowDetails(v=>!v)} />
123	          )}
124	        </Stack>
125	      </Box>
126	      <Box sx={{ mt: 2 }}>
127	        <Collapse in={showDetails}>
128	          {connection.status === 'connected' && <Alert severity="success">{connection.lastMessage}</Alert>}
129	          {connection.status === 'failed' && <Alert severity="error">{connection.lastMessage}</Alert>}
130	        </Collapse>
131	      </Box>
132	      {savedConnections.length > 0 && (
133	        <Box sx={{ mt: 3 }}>
134	          <Typography variant="subtitle1" sx={{ mb: 1 }}>Saved Connections</Typography>
135	          <Table size="small" aria-label="saved connections">
136	            <TableHead>
137	              <TableRow>
138	                <TableCell>Name</TableCell>
139	                <TableCell>DB Type</TableCell>
140	                <TableCell>Host</TableCell>
141	                <TableCell>Database</TableCell>
142	                <TableCell>Status</TableCell>
143	                <TableCell>Last Connected</TableCell>
144	                <TableCell align="right">Actions</TableCell>
145	              </TableRow>
146	            </TableHead>
147	            <TableBody>
148	              {savedConnections.map((c) => (
149	                <TableRow key={c.id} hover selected={activeConnectionId === c.id}>
150	                  <TableCell>{c.name}</TableCell>
151	                  <TableCell>{c.db_type}</TableCell>
152	                  <TableCell>{c.host}</TableCell>
153	                  <TableCell>{c.db_name || '-'}</TableCell>
154	                  <TableCell>
155	                    <Chip size="small" color={c.status === 'connected' ? 'success' : (c.status === 'failed' ? 'error' : 'default')} label={c.status || 'unknown'} />
156	                  </TableCell>
157	                  <TableCell><Typography variant="caption" color="text.secondary">{c.lastConnected ? new Date(c.lastConnected).toLocaleString() : '-'}</Typography></TableCell>
158	                  <TableCell align="right">
159	                    <Stack direction="row" spacing={1} justifyContent="flex-end">
160	                      <Button size="small" variant="text" onClick={() => {
161	                        if (activeConnectionId && activeConnectionId !== c.id) {
162	                          setConfirmSelect(c.id)
163	                        } else {
164	                          setActiveConnectionId(c.id)
165	                          setConnection({ saved: true, name: c.name, status: c.status })
166	                          toast.show('Connection selected', 'success')
167	                        }
168	                      }}>Select</Button>
169	                      <Button size="small" variant="text" onClick={async () => {
170	                        try {
171	                          await (isMock ? mock.testConnection({ db_type: c.db_type, host: c.host }) : Promise.reject(new Error('Backend not available yet')))
172	                          updateSavedConnection(c.id, { status: 'connected', lastConnected: new Date().toISOString() })
173	                          setTestFeedback(prev => ({ ...prev, [c.id]: Date.now() }))
174	                          setTimeout(() => setTestFeedback(prev => { const copy = { ...prev }; delete copy[c.id]; return copy }), 1500)
175	                          toast.show('Test performed', 'success')
176	                        } catch (e) {
177	                          updateSavedConnection(c.id, { status: 'failed' })
178	                          setTestFeedback(prev => ({ ...prev, [c.id]: Date.now() }))
179	                          setTimeout(() => setTestFeedback(prev => { const copy = { ...prev }; delete copy[c.id]; return copy }), 1500)
180	                          toast.show('Test performed', 'error')
181	                        }
182	                      }}>Test</Button>
183	                      {testFeedback[c.id] && (
184	                        <Typography variant="caption" color="text.secondary" sx={{ alignSelf: 'center' }}>Test performed</Typography>
185	                      )}
186	                      <Button size="small" variant="text" onClick={() => {
187	                        setEditingId(c.id)
188	                        reset({
189	                          db_type: c.db_type || 'postgres',
190	                          host: c.host || '',
191	                          port: 5432,
192	                          db_name: c.db_name || '',
193	                          username: '',
194	                          password: '',
195	                          ssl: false,
196	                        })
197	                        window.scrollTo({ top: 0, behavior: 'smooth' })
198	                      }}>Edit</Button>
199	                      <Button size="small" color="error" variant="text" onClick={() => setConfirmDelete(c.id)}>Delete</Button>
200	                    </Stack>
201	                  </TableCell>
202	                </TableRow>
203	              ))}
204	            </TableBody>
205	          </Table>
206	        </Box>
207	      )}
208	
209	      <ConfirmDialog
210	        open={!!confirmSelect}
211	        title="Replace Active Connection?"
212	        message="Selecting this connection will replace the current active one. Continue?"
213	        confirmText="Yes, select"
214	        onClose={() => setConfirmSelect(null)}
215	        onConfirm={() => {
216	          const id = confirmSelect
217	          const c = savedConnections.find(x => x.id === id)
218	          if (c) {
219	            setActiveConnectionId(id)
220	            setConnection({ saved: true, name: c.name, status: c.status })
221	            toast.show('Connection selected', 'success')
222	          }
223	          setConfirmSelect(null)
224	        }}
225	      />
226	
227	      <ConfirmDialog
228	        open={!!confirmDelete}
229	        title="Delete Connection"
230	        message="This will permanently remove the saved connection. Continue?"
231	        confirmText="Delete"
232	        onClose={() => setConfirmDelete(null)}
233	        onConfirm={() => {
234	          removeSavedConnection(confirmDelete)
235	          toast.show('Connection deleted', 'success')
236	          setConfirmDelete(null)
237	        }}
238	      />
239	    </Paper>
240	  )
241	}
